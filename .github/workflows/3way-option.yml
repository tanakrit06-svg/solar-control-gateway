name: 3way-option

on:
  repository_dispatch:
    types: [log_event]

jobs:
  handle_soc:
    runs-on: ubuntu-latest
    steps:
      - name: Log UUID
        run: |
          echo "üÜî UUID from ESP: ${{ github.event.client_payload.uuid }}"
          echo "üîã SOC received: ${{ github.event.client_payload.soc }}"

      - name: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö lock
        run: |
          LOCK_FILE="solar_state.lock"
          if [ -f "$LOCK_FILE" ]; then
            echo "üîí Workflow ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°"
            exit 0
          fi
          touch "$LOCK_FILE"
          echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á lock ‡πÅ‡∏•‡πâ‡∏ß"

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        id: read_state
        env:
          SOC: ${{ github.event.client_payload.soc }}
        run: |
          echo "üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ SOC: $SOC"

          FIRST_TIME="false"
          SOC_CHANGED="true"

          if [ -z "$SOC" ]; then
            echo "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ SOC ‚Üí ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
            exit 1
          fi

          touch solar_state.txt

          MODE=$(grep '^mode=' solar_state.txt | cut -d '=' -f2)
          SOLAR_ON_SENT=$(grep '^solar_on_sent=' solar_state.txt | cut -d '=' -f2)
          SOLAR_OFF_SENT=$(grep '^solar_off_sent=' solar_state.txt | cut -d '=' -f2)
          LAST_SOC=$(grep '^last_soc=' solar_state.txt | cut -d '=' -f2)
          EVER_LOW_BATT=$(grep '^ever_low_batt=' solar_state.txt | cut -d '=' -f2)
          STATUS=$(grep '^status=' solar_state.txt | cut -d '=' -f2)

          if [ -z "$MODE" ] || [ -z "$SOLAR_ON_SENT" ] || [ -z "$SOLAR_OFF_SENT" ] || [ -z "$LAST_SOC" ] || [ -z "$EVER_LOW_BATT" ] || [ -z "$STATUS" ]; then
            echo "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà"
            FIRST_TIME="true"

            if [ "$SOC" -le 25 ]; then
              MODE="low_batt"
              EVER_LOW_BATT="true"
            else
              MODE="normal"
              EVER_LOW_BATT="false"
            fi

            SOLAR_ON_SENT="false"
            SOLAR_OFF_SENT="false"
            LAST_SOC="$SOC"
            STATUS="standby"

            echo "mode=$MODE" > solar_state.txt
            echo "solar_on_sent=$SOLAR_ON_SENT" >> solar_state.txt
            echo "solar_off_sent=$SOLAR_OFF_SENT" >> solar_state.txt
            echo "last_soc=$LAST_SOC" >> solar_state.txt
            echo "ever_low_batt=$EVER_LOW_BATT" >> solar_state.txt
            echo "status=$STATUS" >> solar_state.txt
          fi

          STATUS=$(grep '^status=' solar_state.txt | cut -d '=' -f2)
          if [ "$STATUS" != "standby" ]; then
            echo "‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            exit 0
          fi

          sed -i 's/^status=.*/status=running/' solar_state.txt

          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add solar_state.txt
          git commit -m "Set status=running"
          git remote set-url origin https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}
          git push
          echo "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô running ‡πÅ‡∏•‡πâ‡∏ß"

          if [ "$SOC" = "$LAST_SOC" ]; then
            SOC_CHANGED="false"
          fi

          echo "mode=$MODE" >> $GITHUB_OUTPUT
          echo "solar_on_sent=$SOLAR_ON_SENT" >> $GITHUB_OUTPUT
          echo "solar_off_sent=$SOLAR_OFF_SENT" >> $GITHUB_OUTPUT
          echo "last_soc=$LAST_SOC" >> $GITHUB_OUTPUT
          echo "ever_low_batt=$EVER_LOW_BATT" >> $GITHUB_OUTPUT
          echo "first_time=$FIRST_TIME" >> $GITHUB_OUTPUT
          echo "soc_changed=$SOC_CHANGED" >> $GITHUB_OUTPUT

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞, ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Sheet 1/2/3 ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°

      - name: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        env:
          NEW_MODE: ${{ steps.check_mode.outputs.mode }}
          SEND_SOLAR_ON: ${{ steps.check_mode.outputs.send_solar_on }}
          SEND_SOLAR_OFF: ${{ steps.check_mode.outputs.send_solar_off }}
          SOC: ${{ github.event.client_payload.soc }}
          EVER_LOW_BATT: ${{ steps.check_mode.outputs.ever_low_batt }}
        run: |
          if [ "$SEND_SOLAR_ON" = "true" ]; then
            SOLAR_ON_SENT="true"
            SOLAR_OFF_SENT="false"
          elif [ "$SEND_SOLAR_OFF" = "true" ]; then
            SOLAR_ON_SENT="false"
            SOLAR_OFF_SENT="true"
          else
            SOLAR_ON_SENT=$(grep '^solar_on_sent=' solar_state.txt | cut -d '=' -f2)
            SOLAR_OFF_SENT=$(grep '^solar_off_sent=' solar_state.txt | cut -d '=' -f2)
          fi

          echo "mode=$NEW_MODE" > solar_state.txt
          echo "solar_on_sent=$SOLAR_ON_SENT" >> solar_state.txt
          echo "solar_off_sent=$SOLAR_OFF_SENT" >> solar_state.txt
          echo "last_soc=$SOC" >> solar_state.txt
          echo "ever_low_batt=$EVER_LOW_BATT" >> solar_state.txt
          echo "status=standby" >> solar_state.txt

          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add solar_state.txt
          git diff --quiet && git diff --staged --quiet || git commit -m "Update solar_state.txt"
          git remote set-url origin https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}
          git push
          echo "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞ push ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

      - name: ‡∏•‡∏ö lock ‡∏´‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        run: |
          rm -f solar_state.lock
          echo "‚úÖ ‡∏•‡∏ö lock ‡πÅ‡∏•‡πâ‡∏ß"
